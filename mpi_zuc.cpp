#include <iostream>
#include <vector>
#include <iostream>
#include <fstream>
#include <string>
#include <mpi.h>
#include "ZUC.h"


int main(int argc, char *argv[]) {
    unsigned char iv[16] = {0x84, 0x31, 0x9a, 0xa8, 0xde, 0x69, 0x15, 0xca, 0x1f, 0x6b, 0xda, 0x6b, 0xfb, 0xd8, 0xc7, 0x66}; //initial vector, could be changed if you like
    int comm_sz;
    int my_rank;
    int keyStreamSize;
    int pkeyStreamSize;
    const int MAX=320000000;
    int info[MAX];
    // seed value handling
    std::string key_string;
    std::cout << "Enter key (16 symbols only):\n>>"; // seed value goes in here
    getline(std::cin, key_string);
    if(key_string.size() != 16){
        std::cout << "Bad key size:" << key_string.size() << std::endl;
        return -1;
    } // catching bad seed value error
    
    // how many random numbers to generate?
    unsigned char *key = (unsigned char*)key_string.c_str();
    std::cout << "Enter key stream size:\n>>";
    std::cin >> keyStreamSize;
    pkeyStreamSize = int (keyStreamSize/comm_sz);
    unsigned int *pKeyStream = new unsigned int[pkeyStreamSize];
    //
    
    // MPI communication
	MPI_Init(NULL, NULL);
	MPI_Comm_size(MPI_COMM_WORLD, &comm_sz); 
	MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);
	if (my_rank != 0) {
        std::cout << pKeyStream << "Generated by process %d of %d" << my_rank << comm_sz <<std::endl;
        //unsigned int *pKeyStream = new unsigned int[pkeyStreamSize];
        Initialization(key, iv);
        GenerateKeyStream(pKeyStream, keyStreamSize);
        /*
        std::cout << "Generated key stream:" << std::endl << std::endl;
        for (int i = 0; i < pkeyStreamSize; ++i){
            std::cout << std::dec <<  i << "\t0x" << std::oct << pKeyStream[i] << std::endl;
        }
         */
		MPI_Send(info, pkeyStreamSize+1, MPI_INT, 0, 0, MPI_COMM_WORLD);
	} 
	else {
		printf("Greetings from process %d of %d!\n", my_rank, comm_sz);
		for (int q = 1; q < comm_sz; q++) {
		MPI_Recv(pKeyStream, pkeyStreamSize, MPI_INT, q, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		printf("%d\n", pKeyStream); }
	}
	MPI_Finalize();
	return 0; 
	}
